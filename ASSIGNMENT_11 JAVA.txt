                                  ASSIGNMENT_11

1.
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogFileAnalyzer {
    private static final String LOG_DIR = "/logs";
    private static final String ANOMALIES_FILE = "Anomalies.txt";
    private static final Pattern ERROR_PATTERN = Pattern.compile("ERROR.*");
    private static final Pattern DEBUG_PATTERN = Pattern.compile("DEBUG.*SELECT.*");

    public static void main(String[] args) throws IOException {
        Path logDir = Paths.get(LOG_DIR);
        if (!Files.isDirectory(logDir)) {
            System.err.println("Log directory not found: " + LOG_DIR);
            return;
        }

        FileWriter anomaliesWriter = new FileWriter(ANOMALIES_FILE);
        try {
            Files.walk(logDir)
                    .filter(Files::isRegularFile)
                    .forEach(file -> analyzeLogFile(file, anomaliesWriter));
        } finally {
            anomaliesWriter.close();
        }
    }

    private static void analyzeLogFile(Path file, FileWriter anomaliesWriter) {
        try (BufferedReader reader = new BufferedReader(new FileReader(file.toFile()))) {
            String line;
            int lineNumber = 1;
            while ((line = reader.readLine()) != null) {
                if (isAnomalous(line)) {
                    writeAnomaly(line, file, lineNumber, anomaliesWriter);
                }
                lineNumber++;
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + file);
        }
    }

    private static boolean isAnomalous(String line) {
        Matcher errorMatcher = ERROR_PATTERN.matcher(line);
        Matcher debugMatcher = DEBUG_PATTERN.matcher(line);
        return errorMatcher.matches() || debugMatcher.matches();
    }

    private static void writeAnomaly(String line, Path file, int lineNumber, FileWriter anomaliesWriter) throws IOException {
        anomaliesWriter.write(line + "\n");
        anomaliesWriter.write("Found in: " + file + " at line " + lineNumber + "\n\n");
    }
}
OUTPUT:
 

2.
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.regex.*;

public class SimpleWebCrawler {
    private static final Pattern EMAIL_PATTERN = Pattern.compile(
            "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}");
    private static final Pattern PHONE_PATTERN = Pattern.compile(
            "\\(?\\d{3}\\)?[-\\s]?\\d{3}[-\\s]?\\d{4}");
    
    private static Set<String> visitedLinks = new HashSet<>();
    private static BufferedWriter writer;

    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Usage: java SimpleWebCrawler <start-url>");
            return;
        }

        String startUrl = args[0];

        try {
            writer = new BufferedWriter(new FileWriter("ContactInfo.txt"));
            crawl(startUrl);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static void crawl(String url) {
        if (visitedLinks.contains(url)) {
            return;
        }

        visitedLinks.add(url);

        try {
            URL urlObj = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder content = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
            reader.close();

            String pageContent = content.toString();
            extractContactInfo(pageContent, url);

            // Extract links from the page content
            Pattern linkPattern = Pattern.compile("href=\"(http[s]?://[^\"]*)\"");
            Matcher linkMatcher = linkPattern.matcher(pageContent);

            while (linkMatcher.find()) {
                String nextUrl = linkMatcher.group(1);
                if (nextUrl.startsWith(url) && !visitedLinks.contains(nextUrl)) {
                    crawl(nextUrl);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void extractContactInfo(String htmlContent, String pageUrl) {
        Matcher emailMatcher = EMAIL_PATTERN.matcher(htmlContent);
        while (emailMatcher.find()) {
            writeToFile("Email: " + emailMatcher.group());
            writeToFile("Found on: " + pageUrl);
        }

        Matcher phoneMatcher = PHONE_PATTERN.matcher(htmlContent);
        while (phoneMatcher.find()) {
            writeToFile("Phone: " + phoneMatcher.group());
            writeToFile("Found on: " + pageUrl);
        }
    }

    private static void writeToFile(String line) {
        try {
            writer.write(line);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
OUTPUT:
 

